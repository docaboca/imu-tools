#!/usr/bin/env python3
import itertools
import json as json_enc
import sys
import time

import click
import paho.mqtt.client as mqtt
from loguru import logger

from config import MQTT_CONFIG

logger.remove()
logger.add(sys.stdout, format="<dim>{time:mm:ss.SS}:</> {message}", level="INFO")


def on_publish(_client, userdata, mid):
    logger.info("Published(id={}) to {}", mid, userdata)


def gen_samples():
    for i in itertools.count(0):
        frac = (i % 1000) / 1000
        yield {
            "timestamp": int(time.time() * 1000),
            "temperature": 27 + frac,
            "accelerometer": (20 + frac, 21 + frac, 22 + frac),
            "magnetometer": (30 + frac, 31 + frac, 32 + frac),
            "gyroscope": (40 + frac, 41 + frac, 42 + frac),
            "euler": (50 + frac, 51 + frac, 52 + frac),
        }


@click.command()
@click.option("--json", is_flag=True)
@click.option("--repeat", is_flag=True)
def main(json=False, repeat=False):
    global client  # FIXME: w/out this info.wait_for_publish returns too early
    client = mqtt.Client(userdata=MQTT_CONFIG["host"])
    client.on_publish = on_publish
    client.on_log = True

    if MQTT_CONFIG["user"]:
        client.username_pw_set(MQTT_CONFIG["user"], password=MQTT_CONFIG["password"])
    client.connect(MQTT_CONFIG["host"], MQTT_CONFIG["port"])

    samples = (
        map(json_enc.dumps, gen_samples())
        if json
        else map("sender=mqtt_pub({})".format, itertools.count())
    )
    if not repeat:
        samples = itertools.islice(samples, 1) if json else ["sender=mqtt_pub"]

    client_id = 'mqtt-pub'
    for payload in samples:
        info = client.publish(f"imu/{client_id}", payload=payload)
        info.wait_for_publish()


if __name__ == "__main__":
    main()
