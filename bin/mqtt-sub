#!/usr/bin/env python3
import json
import time

import click
import paho.mqtt.client as mqtt

from config import MQTT_CONFIG


# Called on a CONNACK response from the server.
def on_connect(client, userdata, _flags, rc):
    hostname, *_ = userdata
    print(f"Connected(host={hostname}, rc={rc})")
    client.subscribe("#")


def on_subscribe(_client, _userdata, mid, granted_qos):
    print(f"Subscribed(id={mid} qos={list(granted_qos)})")


def sample_rate_reporter_gen(sample_period=10):
    sample_start_time, sample_count = time.time(), 0
    show_frame_rate = True
    while True:
        yield
        sample_count += 1
        now = time.time()
        elapsed = now - sample_start_time
        # print(".", elapsed, end="", flush=True)
        if elapsed >= sample_period:
            if show_frame_rate:
                # logger.info("{:0.1f} samples/sec", samples / elapsed)
                print(f"{sample_count / elapsed:0.1f} samples/sec")
            sample_start_time = now
            sample_count = 0


# Called when a PUBLISH message is received from the server.
def on_message(_client, userdata, msg):
    _, sample_rate_reporter = userdata
    data = msg.payload
    try:
        data = data.decode()
    except UnicodeError:
        pass
    try:
        data = json.loads(data)
    except json.JSONDecodeError:
        pass
    except Exception as e:  # pylint: disable=broad-except
        print("Error:", e)
    if sample_rate_reporter:
        next(sample_rate_reporter)
    else:
        print(f"Message(topic={msg.topic}): {data}")


@click.command()
@click.option("--show-sample-rate", is_flag=True)
def main(show_sample_rate=False):
    sample_rate_reporter = sample_rate_reporter_gen()
    client = mqtt.Client(userdata=(MQTT_CONFIG["host"], sample_rate_reporter))
    client.on_connect = on_connect
    client.on_message = on_message
    client.on_subscribe = on_subscribe
    client.on_log = True

    if MQTT_CONFIG["user"]:
        client.username_pw_set(MQTT_CONFIG["user"], password=MQTT_CONFIG["password"])
    client.connect(MQTT_CONFIG["host"], MQTT_CONFIG["port"])

    try:
        client.loop_forever()
    except KeyboardInterrupt:
        pass


if __name__ == "__main__":
    main()
